{"version":3,"sources":["components/styleHelper/mainStyles.ts","constants/colors.ts","shared/utilities/localstorage.ts","shared/users/users.ts","components/hooks/useLogin.tsx","store/actionCreators.ts","store/actions.ts","components/LoginComponent.tsx","shared/services/ResponseHandler.ts","store/selectors/typingTextSelector.ts","components/HighlightedLetters.tsx","shared/helpers/typingHelper.ts","components/LoadingComponent.tsx","components/ProgressPanelComponent.tsx","store/selectors/passedGamesSelector.ts","components/TableRowComponent.tsx","components/PassedGamesComponent.tsx","store/selectors/userDataSelector.ts","components/HeaderComponent.tsx","components/PlayComponent.tsx","constants/gameInterval.ts","shared/services/ApiService.ts","components/ProtectedRoute.tsx","components/App.tsx","serviceWorker.js","store/devTool.ts","store/reducer.ts","index.tsx"],"names":["injectGlobal","inputClass","css","mainBtnClass","resetButtonDefaultStyles","getLocalStorage","setItem","key","item","localStorage","JSON","stringify","getItem","parse","undefined","removeItem","users","username","password","fullName","id","storage","useLogin","React","userData","setUserData","error","setError","login","user","find","findUser","logout","Promise","resolve","isLoggedIn","setPassedGame","passedGame","type","payload","loginWrapperClass","loginFormClass","loginBtnClass","Login","props","usernameRef","passwordRef","history","useHistory","onSubmitHandler","current","value","handleEnterKeyPress","event","document","addEventListener","removeEventListener","passedGames","push","className","Form","onSubmit","Alert","variant","Group","Control","ref","placeholder","Button","onClick","LoginComponent","connect","dispatch","responseHandler","response","ok","json","then","data","status","message","statusText","err","typingTextSelector","state","typingText","cursorAnimation","keyframes","HighlightedStyled","styled","span","color","showCursor","HighlightedLetters","characters","data-testid","testId","typingHelper","getWpm","timer","Math","round","length","calculateCompletionPercent","wordsCount","text","textWordsCount","split","getAverage","array","reduce","acc","loadingRotate","loadingClass","loadingIconClass","LoadingComponent","isLoading","size","resultClass","ProgressPanelComponent","time","wpm","passedGamesSelector","TableRowComponent","index","correctWordsCount","completionPercent","tableClass","PassedGames","average","Table","striped","bordered","hover","map","PassedGamesComponent","userDataSelector","headerClass","logoutBtnClass","Header","Navbar","bg","HeaderComponent","textClass","startButtonClass","Play","inputValue","setInputValue","setText","setIsLoading","isStarted","setIsStarted","wrongChars","setWrongChars","correctChars","setCorrectChars","setTimer","words","setWords","setWpm","intervalId","setIntervalId","passedWords","setPassedWords","fetchDataFailError","setFetchDataFailError","inputRef","setInterval","clearInterval","join","finishGame","start","setTypingText","focus","passedWordsCount","handleBackspace","char","deletedChar","substring","highlightedChars","typeCorrectWord","passedChars","newWords","splice","disabled","onKeyDown","onChange","target","url","method","options","generalOptions","headers","body","fetch","ApiService","catch","console","log","PlayComponent","ProtectedRoute","children","rest","render","to","pathname","from","location","containerClass","App","Container","exact","path","strict","Boolean","window","hostname","match","storeNameForDevTool","initialState","dataFromLocalStorage","store","createStore","action","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","name","compose","applyMiddleware","thunk","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b7a4f8d5.chunk.js","sourcesContent":["import\n{css, injectGlobal} from \"emotion\"\nimport {\n    inputFocusedShadowColor, inputOutlineColor,\n    inputShadowColor,\n    mainBg,\n    mainColor,\n    mainTextColor, secondaryColor\n} from \"../../constants/colors\";\n\ninjectGlobal`\n    @import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;600&display=swap');\n    \n    body {\n        color: ${mainTextColor};\n        background-color: ${mainBg};\n        font-family: 'Open Sans', sans-serif;\n    }\n`\n\nexport const inputClass = css`\n    padding-top: 25px; \n    padding-bottom: 25px;\n    border-color: #f1f1f1;\n    box-shadow: 0 0 9px ${inputShadowColor};\n    \n    &:focus {\n        outline: 1px solid ${inputOutlineColor};\n        border-color: transparent;\n        box-shadow: 0 0 9px ${inputFocusedShadowColor};\n    }\n`\n\nexport const mainBtnClass = css`\n    width: 80%;\n    background-color: ${mainColor};\n    border-radius: 18px;\n    padding-top: 8px;\n    padding-bottom: 8px;\n`\n\nexport const resetButtonDefaultStyles = css`\n    border: none;\n    padding: 0;\n    background: none;\n    cursor: pointer;\n    \n    &:focus {\n        outline: none;\n    }\n`\n","export const mainColor = '#436EEE'\nexport const secondaryColor = '#80A0FF'\nexport const mainTextColor = '#6b7077'\nexport const borderColor = '#dee2e6'\nexport const mainBg = '#FAFBFD'\nexport const inputShadowColor = '#EDF0F7'\nexport const inputFocusedShadowColor = '#DAE3FF'\nexport const inputOutlineColor = '#F2F6FF'\nexport const highlightColor = 'blue'\nexport const highlightWrongColor = 'red'\n","const STORAGE_PREFIX = 'type'\n\ninterface IGetLocalStorage {\n    setItem: (key: string, item: any) => void\n    getItem: (key: string) => any\n    removeItem: (key: string) => void\n}\n\nexport function getLocalStorage(): IGetLocalStorage {\n    const setItem = (key: string, item: any): void => {\n        localStorage.setItem(`${STORAGE_PREFIX}_${key}`, JSON.stringify(item))\n    }\n\n    const getItem = (key: string): any => {\n        const item: string | null = localStorage.getItem(`${STORAGE_PREFIX}_${key}`)\n        return item ? JSON.parse(item) : undefined\n    }\n\n    const removeItem = (key: string): void => {\n        localStorage.removeItem(`${STORAGE_PREFIX}_${key}`)\n    }\n\n    return {\n        setItem,\n        getItem,\n        removeItem\n    }\n}\n","import {IUser} from \"../models/IUser\";\n\nexport const users: IUser[] = [\n    {\n        username: 'user1',\n        password: 'user1',\n        fullName: 'User 1',\n        id: 'user1id'\n    },\n    {\n        username: 'user2',\n        password: 'user2',\n        fullName: 'User 2',\n        id: 'user2id'\n    }\n]\n","import * as React from \"react\";\nimport {getLocalStorage} from \"../../shared/utilities/localstorage\";\nimport {IUser} from \"../../shared/models/IUser\";\nimport {users} from \"../../shared/users/users\";\n\nconst storage = getLocalStorage()\n\nexport const useLogin = () => {\n    const [userData, setUserData] = React.useState<IUser | null>(null)\n    const [error, setError] = React.useState<string>('')\n\n    const findUser = (username: string, password: string): IUser | undefined =>\n        users.find((user: IUser) => {\n            return username === user.username && password === user.password\n        })\n\n    const login = (username: string, password: string): void => {\n        const user = findUser(username, password)\n\n        if(user) {\n            setUserData(user)\n        } else {\n            setError('User does not exist')\n        }\n    }\n\n    const logout = (): Promise<any> => {\n        return new Promise((resolve) => {\n            resolve(storage.removeItem('user'))\n        })\n    }\n\n    const isLoggedIn = (): boolean => {\n        return !!storage.getItem('user')\n    }\n\n    return {login, logout, isLoggedIn, userData, error}\n}\n","import * as actions from './actions'\nimport {IPassedGame} from \"../shared/models/IPassedGame\";\nimport {IAction} from \"./reducer\";\nimport {IUser} from \"../shared/models/IUser\";\nimport {Dispatch} from \"redux\";\n\nexport function setTypingText(text: string): IAction {\n    return {\n        type: actions.SET_TYPING_TEXT,\n        payload: text\n    }\n}\n\nexport function setPassedGame(passedGame: IPassedGame[] | null): IAction {\n    return {\n        type: actions.SET_PASSED_GAME,\n        payload: passedGame\n    }\n}\n\nexport function setUserData(userData: IUser) {\n    return function (dispatch: Dispatch) {\n        return dispatch({\n            type: actions.SET_USER_DATA,\n            payload: userData\n        })\n    }\n}\n","export const SET_TYPING_TEXT = 'SET_TYPING_TEXT'\nexport const SET_PASSED_GAME = 'SET_PASSED_GAME'\nexport const SET_USER_DATA = 'TOGGLE_LOGE_IN'\n","import * as React from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport {Alert, Button, Form} from \"react-bootstrap\";\nimport {css} from \"emotion\";\nimport {inputClass, mainBtnClass} from \"./styleHelper/mainStyles\";\nimport {useLogin} from \"./hooks/useLogin\";\nimport {getLocalStorage} from \"../shared/utilities/localstorage\";\nimport {setPassedGame, setUserData} from \"../store/actionCreators\";\nimport {connect} from \"react-redux\";\nimport {IUser} from \"../shared/models/IUser\";\nimport {IPassedGame} from \"../shared/models/IPassedGame\";\n\ninterface ILoginComponentProps {\n    setUserData: (userData: IUser) => void\n    setPassedGame: (passedGame: IPassedGame[] | null) => void\n}\n\nconst loginWrapperClass = css`\n    padding-top: 50px;\n`\n\nconst loginFormClass = css`\n    text-align: center;\n    max-width: 400px;\n    margin: 0 auto;\n`\n\nconst loginBtnClass = css`\n    margin-top: 30px;\n`\n\nconst storage = getLocalStorage()\n\nexport const Login: React.FunctionComponent<ILoginComponentProps> = React.memo((props) => {\n    const usernameRef: React.RefObject<HTMLInputElement> = React.useRef(null)\n    const passwordRef: React.RefObject<HTMLInputElement> = React.useRef(null)\n    const history = useHistory()\n    const {login, userData, error} = useLogin()\n\n    const onSubmitHandler = (): void => {\n        const username = usernameRef.current!.value\n        const password = passwordRef.current!.value\n\n        login(username, password)\n    }\n\n    const handleEnterKeyPress = (event: any) => {\n        if(event.key === 'Enter') {\n            onSubmitHandler()\n        }\n    }\n\n    React.useEffect(() => {\n        document.addEventListener('keypress', handleEnterKeyPress)\n\n        return () => {\n            document.removeEventListener('keypress', handleEnterKeyPress)\n        }\n    }, [])\n\n    React.useEffect(() => {\n        if(userData) {\n            storage.setItem('user', userData)\n            props.setUserData(userData)\n            const passedGames = storage.getItem(`passedGames-${userData.id}`)\n            props.setPassedGame(passedGames ? passedGames : null)\n            history.push('/play')\n        }\n    }, [userData])\n\n    return (\n        <div className={loginWrapperClass}>\n            <Form className={loginFormClass} onSubmit={onSubmitHandler}>\n                {error &&\n                <Alert variant='danger'>\n                    {error}\n                </Alert>\n                }\n                <Form.Group>\n                    <Form.Control\n                        ref={usernameRef}\n                        className={`${inputClass} `}\n                        type=\"text\"\n                        placeholder='Username'\n                    />\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Control\n                        ref={passwordRef}\n                        className={`${inputClass}`}\n                        type=\"password\"\n                        placeholder='Password'\n                    />\n                </Form.Group>\n\n                <Button className={`${mainBtnClass} ${loginBtnClass}`} type=\"button\" onClick={onSubmitHandler}>\n                    Login\n                </Button>\n            </Form>\n        </div>\n    );\n})\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    setUserData: (userData: IUser) => dispatch(setUserData(userData)),\n    setPassedGame: (passedGame: IPassedGame[] | null) => dispatch(setPassedGame(passedGame))\n})\n\nexport const LoginComponent = connect(null, mapDispatchToProps)(Login)\n","export const responseHandler = {\n    success: (response: any) => {\n        if (response.ok) {\n            return response.json().then((data: any) => {\n                if (data.error) {\n                    throw {\n                        status: response.status,\n                        message: data.error.message,\n                    }\n                }\n                return data\n            })\n        } else {\n            return response.json().then(\n                (data: any) => {\n                    throw {\n                        status: response.status,\n                        message: data.error.message,\n                    }\n                },\n                () => {\n                    throw {\n                        status: response.status,\n                        message: response.statusText,\n                    }\n                }\n            )\n        }\n    },\n    failure: (err: any) => {\n        throw {\n            message: err.message || err.statusText,\n        }\n    },\n}\n","import {IState} from \"../IState\";\n\nexport const typingTextSelector = (state: IState) => state.typingText\n","import * as React from 'react'\nimport {keyframes} from 'emotion'\nimport styled from '@emotion/styled'\n\nexport interface IHighlightedLettersProps {\n    characters: string\n    showCursor: boolean\n    color: string\n    testId?: string\n}\n\nconst cursorAnimation = keyframes`\n    from {\n        opacity: 0;\n    }\n    \n    to {\n        opacity: 1;\n    }\n`\n\nconst HighlightedStyled = styled.span<{color: string, showCursor: boolean}>`\n    color: ${props => props.color};\n    position: relative;\n    \n    ${props => props.showCursor &&`\n        &:after {\n            animation: ${cursorAnimation} 0.4s linear infinite alternate;\n            content: '';\n            position: absolute;\n            width: 1px;\n            height: 100%;\n            right: 0;\n            background-color blue;\n        }\n    `}\n`\n\nexport const HighlightedLetters: React.FunctionComponent<IHighlightedLettersProps> = React.memo(props => {\n    return props.characters ? <HighlightedStyled\n        color={props.color}\n        showCursor={props.showCursor}\n        data-testid={props.testId}>\n\n        {props.characters}\n    </HighlightedStyled> : null\n})\n","import {IPassedGame} from \"../models/IPassedGame\";\n\nexport function typingHelper() {\n    const getWpm = (characters: string, timer: number) => {\n        return Math.round((characters.length / 5))\n    }\n\n    const calculateCompletionPercent = (wordsCount: number, text: string): number => {\n        const textWordsCount = text.split(' ').length\n        return Math.round(wordsCount / textWordsCount * 100)\n    }\n\n    const getAverage = (array: IPassedGame[], value: 'wpm' | 'correctWordsCount' | 'completionPercent'): number => {\n        return Math.round(array.reduce((acc: number, item: IPassedGame) => {\n            return acc + item[value]\n        }, 0) / array.length)\n    }\n\n    return {\n        getWpm,\n        calculateCompletionPercent,\n        getAverage\n    }\n}\n","import * as React from 'react'\nimport {css, keyframes} from \"emotion\"\nimport {mainColor} from \"../constants/colors\"\nimport {RiLoader2Line} from \"react-icons/all\"\n\nexport interface ILoadingComponentProps {\n    isLoading: boolean\n}\nconst loadingRotate = keyframes`\n    0% {\n        transform: rotate(0) \n    }\n    \n    100% {\n        transform: rotate(360deg) \n    }\n`\n\nconst loadingClass = css`\n    align-items: center;\n    bottom: 0;\n    background-color: rgba(255,255,255,0.4);\n    display: flex;\n    left: 0;\n    right: 0;\n    top: 0;\n    justify-content: center;\n    position: absolute;\n`\n\nconst loadingIconClass = css`\n    animation: ${loadingRotate} 1.4s infinite linear;\n`\n\nexport const LoadingComponent: React.FunctionComponent<ILoadingComponentProps> = React.memo(props => {\n    return props.isLoading ? <div className={loadingClass} data-testid='loading'>\n        <RiLoader2Line size='40px' color={mainColor} className={loadingIconClass}/>\n    </div> : null\n})\n","import * as React from 'react'\nimport {css} from \"emotion\";\n\ninterface IProgressPanelComponentProps {\n    time: number\n    wpm: number\n}\n\nconst resultClass = css`\n    display: flex;\n    padding: 20px 0;\n    span:first-child {\n        margin-right: 20px\n    }\n`\n\nexport const ProgressPanelComponent: React.FunctionComponent<IProgressPanelComponentProps> = React.memo(props => {\n    return <div className={resultClass}>\n        <span>TIME: {props.time}</span>\n        <span>WPM: {props.wpm}</span>\n    </div>\n})\n","import {IState} from \"../IState\";\n\nexport const passedGamesSelector = (state: IState) => state.passedGames\n","import * as React from 'react'\nimport {IPassedGame} from \"../shared/models/IPassedGame\";\n\nexport interface ITableRowComponentProps {\n    data: IPassedGame\n    index?: number\n}\n\nexport const TableRowComponent: React.FunctionComponent<ITableRowComponentProps> = React.memo(props => {\n    const {index, data: {wpm, correctWordsCount, completionPercent}} = props\n\n    return <tr>\n        <td>{index ? index : 'Average'}</td>\n        <td>{wpm}</td>\n        <td>{completionPercent}</td>\n        <td>{correctWordsCount}</td>\n    </tr>\n})\n","import * as React from 'react'\nimport {Table} from 'react-bootstrap';\nimport {connect} from \"react-redux\";\nimport {IState} from \"../store/IState\";\nimport {passedGamesSelector} from \"../store/selectors/passedGamesSelector\";\nimport {IPassedGame} from \"../shared/models/IPassedGame\";\nimport {TableRowComponent} from \"./TableRowComponent\";\nimport {css} from \"emotion\";\nimport {typingHelper} from \"../shared/helpers/typingHelper\";\n\nexport interface IPassedGamesComponentProps {\n    passedGames: IPassedGame[]\n}\n\nconst tableClass = css`\n    margin-top: 50px;\n`\n\nexport const PassedGames: React.FunctionComponent<IPassedGamesComponentProps> = React.memo(props => {\n    const {getAverage} = typingHelper()\n    const average = {\n        wpm: getAverage(props.passedGames, 'wpm'),\n        completionPercent: getAverage(props.passedGames, 'completionPercent'),\n        correctWordsCount: getAverage(props.passedGames, 'correctWordsCount')\n    }\n\n    return props.passedGames.length ?\n        <Table striped bordered hover className={tableClass} data-testid='passed-games-table'>\n            <thead>\n            <tr>\n                <th>#</th>\n                <th>WPM</th>\n                <th>Completion %</th>\n                <th>Correct words</th>\n            </tr>\n            </thead>\n            <tbody>\n\n            {props.passedGames.map((passedGame: IPassedGame, index: number) => (\n                <TableRowComponent data={passedGame} index={++index} key={index}/>\n            ))}\n\n            <TableRowComponent data={average}/>\n            </tbody>\n        </Table> : null\n})\n\nconst mapStateToProps = (state: IState) => ({\n    passedGames: passedGamesSelector(state)\n})\n\nexport const PassedGamesComponent = connect(mapStateToProps)(PassedGames)\n","import {IState} from \"../IState\";\n\nexport const userDataSelector = (state: IState) => state.userData\n","import * as React from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport {RiLogoutCircleRLine} from \"react-icons/all\";\nimport {resetButtonDefaultStyles} from \"./styleHelper/mainStyles\";\nimport {css} from \"emotion\";\n\nimport {useLogin} from \"./hooks/useLogin\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport {connect} from \"react-redux\";\nimport {IState} from \"../store/IState\";\nimport {userDataSelector} from \"../store/selectors/userDataSelector\";\nimport {IUser} from \"../shared/models/IUser\";\nimport {Dispatch} from \"redux\";\nimport {setPassedGame} from \"../store/actionCreators\";\nimport {IPassedGame} from \"../shared/models/IPassedGame\";\n\ninterface IHeaderComponentProps {\n    userData: IUser | null\n    setPassedGame: (passedGame: IPassedGame[] | null) => void\n}\n\nconst headerClass = css`\n    border-radius: 3px;\n    color: #fff;\n`\n\nconst logoutBtnClass = css`\n    color: #fff;\n`\n\nconst Header: React.FunctionComponent<IHeaderComponentProps> = React.memo((props) => {\n    const history = useHistory()\n    const {logout} = useLogin()\n\n    const onLogoutClickHandler = () => {\n        logout().then(() => {\n            history.push('/login')\n            props.setPassedGame(null)\n        })\n    }\n\n    return <Navbar bg=\"dark\" variant=\"dark\" className={headerClass}>\n        <div className='mr-auto'>\n            Welcome <span className='font-weight-bold'>{props.userData!.fullName}</span>\n        </div>\n\n        <button className={`${resetButtonDefaultStyles} ${logoutBtnClass}`} onClick={onLogoutClickHandler}>\n            Logout <RiLogoutCircleRLine size={27} color='#fff'/>\n        </button>\n    </Navbar>\n})\n\nconst mapStateToProps = (state: IState) => ({\n    userData: userDataSelector(state)\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    setPassedGame: (passedGames: IPassedGame[] | null) => dispatch(setPassedGame(passedGames))\n})\n\nexport const HeaderComponent = connect(mapStateToProps, mapDispatchToProps)(Header)\n\n","import * as React from \"react\";\nimport {connect} from \"react-redux\";\nimport {css} from \"emotion\";\nimport Button from \"react-bootstrap/Button\";\nimport {ApiService} from \"../shared/services/ApiService\";\nimport {IState} from \"../store/IState\";\nimport {setPassedGame, setTypingText} from \"../store/actionCreators\";\nimport {Dispatch} from \"redux\";\nimport {typingTextSelector} from \"../store/selectors/typingTextSelector\";\nimport {HighlightedLetters} from \"./HighlightedLetters\";\nimport {typingHelper} from '../shared/helpers/typingHelper';\nimport {borderColor, highlightColor, highlightWrongColor} from \"../constants/colors\";\nimport {LoadingComponent} from \"./LoadingComponent\";\nimport {ProgressPanelComponent} from \"./ProgressPanelComponent\";\nimport {GAME_INTERVAL_SECONDS} from \"../constants/gameInterval\";\nimport {IPassedGame} from \"../shared/models/IPassedGame\";\nimport {PassedGamesComponent} from \"./PassedGamesComponent\";\nimport {HeaderComponent} from \"./HeaderComponent\";\nimport {getLocalStorage} from \"../shared/utilities/localstorage\";\nimport {passedGamesSelector} from \"../store/selectors/passedGamesSelector\";\nimport {userDataSelector} from \"../store/selectors/userDataSelector\";\nimport {IUser} from \"../shared/models/IUser\";\nimport {Alert} from \"react-bootstrap\";\n\ninterface IPlayComponentProps {\n    setTypingText: (text: string) => void\n    setPassedGame: (passedGame: IPassedGame[]) => void\n    typingText: string\n    passedGames: IPassedGame[]\n    userData: IUser | null\n}\n\nconst textClass = css`\n    letter-spacing: 0.5px;\n    margin-bottom: 20px;\n    min-height: 150px;\n    border: 1px solid ${borderColor};\n    border-radius: 3px;\n    padding: 12px;\n    position: relative;\n`\n\nconst inputClass = css`\n    width: 100%;\n    padding: 5px;\n`\n\nconst startButtonClass = css`\n    display: block;\n    margin-top: 20px\n`\n\nconst storage = getLocalStorage()\n\nconst Play: React.FunctionComponent<IPlayComponentProps> = React.memo(props => {\n    const [inputValue, setInputValue] = React.useState<string>('')\n    const [text, setText] = React.useState<string>('')\n    const [isLoading, setIsLoading] = React.useState<boolean>(false)\n    const [isStarted, setIsStarted] = React.useState<boolean>(false)\n    const [wrongChars, setWrongChars] = React.useState<string>('')\n    const [correctChars, setCorrectChars] = React.useState<string>('')\n    const [timer, setTimer] = React.useState<number>(GAME_INTERVAL_SECONDS)\n    const [words, setWords] = React.useState<string[]>([])\n    const [wpm, setWpm] = React.useState<number>(0)\n    const [intervalId, setIntervalId] = React.useState<any>(null)\n    const [passedWords, setPassedWords] = React.useState<string>('')\n    const [fetchDataFailError, setFetchDataFailError] = React.useState<string>('')\n\n    const inputRef: React.RefObject<HTMLInputElement> = React.useRef(null)\n    const {getWpm, calculateCompletionPercent} = typingHelper()\n\n    React.useEffect(() => {\n        if (props.typingText) {\n            const id = setInterval(() => {\n                setTimer(timer => timer - 1)\n            }, 1000)\n            setIntervalId(id)\n        }\n\n        return () => {\n            clearInterval(intervalId)\n        }\n    }, [props.typingText])\n\n    React.useEffect(() => {\n        setWpm(getWpm(passedWords.split(' ').join(''), timer))\n\n        if (timer === 0) {\n            finishGame()\n        }\n    }, [timer])\n\n    React.useEffect(() => {\n        if (props.passedGames.length) {\n            storage.setItem(`passedGames-${props.userData!.id}`, props.passedGames)\n        }\n    }, [props.passedGames])\n\n    const getTextHandler = () => {\n        setIsLoading(true)\n        setIsStarted(true)\n        setFetchDataFailError('')\n\n        ApiService().fetchData('https://cors-anywhere.herokuapp.com/https://baconipsum.com/api/?type=all-meat=1', 'GET')\n            .then((data) => {\n                start(data[0])\n            })\n            .catch((error) => {\n                setIsLoading(false)\n                setIsStarted(false)\n                setFetchDataFailError(`${error}. Try again`)\n                console.log(error)\n            })\n    }\n\n    const start = (text: string): void => {\n        props.setTypingText(text)\n        setText(text)\n        setWords(text.split(' '))\n        setIsLoading(false)\n        inputRef.current!.focus()\n    }\n\n    const finishGame = () => {\n        clearInterval(intervalId)\n\n        const passedWordsCount = passedWords ? passedWords.split(' ').length : 0\n        const correctWordsCount = passedWords ? passedWords.split(' ').length : 0\n        const passedGames = [...props.passedGames, {\n            wpm,\n            correctWordsCount,\n            completionPercent: calculateCompletionPercent(passedWordsCount, text)\n        }]\n        props.setPassedGame(passedGames)\n\n        setIsStarted(false)\n        setTimer(GAME_INTERVAL_SECONDS)\n        setText('')\n        setWpm(0)\n        setPassedWords('')\n        setCorrectChars('')\n        setWrongChars('')\n        setInputValue('')\n    }\n\n    const isEventKeyControlledCharacter = (key: string): boolean => key.length > 1 && key !== 'Backspace'\n\n    const onKeydownHandler = (event: any) => {\n        if (isEventKeyControlledCharacter(event.key)) {\n            return\n        }\n\n        highlightedChars(event.key)\n        handleBackspace(event.key)\n        typeCorrectWord(event.key)\n    }\n\n    const handleBackspace = (char: string): void => {\n        if (char === 'Backspace') {\n            if (wrongChars) {\n                const deletedChar = wrongChars.substring(wrongChars.length - 1)\n                setWrongChars(wrongChars.substring(0, wrongChars.length - 1))\n                setText(`${deletedChar}${text}`)\n            } else {\n                const deletedChar = correctChars.substring(correctChars.length - 1)\n                setCorrectChars(highlightedChars => highlightedChars.substring(0, highlightedChars.length - 1))\n                setText(`${deletedChar}${text}`)\n            }\n        }\n    }\n\n    const highlightedChars = (char: string): void => {\n        if (!wrongChars && text[0] === char && char !== 'Backspace') {\n            setCorrectChars(highlightedChars => `${highlightedChars}${char}`)\n            setText(text.substring(1))\n        }\n\n        if (((wrongChars && text[0] === char) || text[0] !== char) && char !== 'Backspace') {\n            setWrongChars(`${wrongChars}${text[0]}`)\n            setText(text.substring(1))\n        }\n    }\n\n    const typeCorrectWord = (char: string): void => {\n        if (char === ' ' && words[0] === correctChars && !wrongChars) {\n            setInputValue('')\n            setPassedWords(passedChars => `${passedChars}${correctChars} `)\n            setCorrectChars('')\n            setWrongChars('')\n            setWords(words => {\n                const newWords = [...words]\n                newWords.splice(0, 1)\n                return newWords\n            })\n        }\n    }\n\n    const onChangeHandler = (event: any): void => {\n        setInputValue(event.target.value)\n\n        if (event.target.value === '') {\n            setText(`${correctChars}${wrongChars}${text}`)\n            setCorrectChars('')\n            setWrongChars('')\n        }\n    }\n\n    return <div>\n        <HeaderComponent/>\n        {fetchDataFailError &&\n            <Alert variant='danger'>\n                {fetchDataFailError}\n            </Alert>\n        }\n        <ProgressPanelComponent time={timer} wpm={wpm}/>\n\n        <div className={textClass}>\n            <LoadingComponent isLoading={isLoading}/>\n            <HighlightedLetters\n                characters={passedWords}\n                showCursor={false}\n                color={highlightColor}\n                testId='passed-words'/>\n\n            <HighlightedLetters\n                characters={correctChars}\n                showCursor={!wrongChars}\n                color={highlightColor}\n                testId='correct-chars'/>\n\n            {wrongChars &&\n            <HighlightedLetters\n                characters={wrongChars}\n                showCursor={!!wrongChars}\n                color={highlightWrongColor}\n                testId='wrong-chars'\n            />\n            }\n\n            {text ? text : null}\n        </div>\n\n        <input\n            disabled={!text}\n            ref={inputRef}\n            type=\"text\"\n            className={inputClass}\n            onKeyDown={onKeydownHandler}\n            onChange={onChangeHandler}\n            placeholder='Type the above text here'\n            value={inputValue}/>\n        <Button disabled={isStarted} className={startButtonClass} onClick={getTextHandler}>Start</Button>\n\n        <PassedGamesComponent/>\n    </div>\n})\n\nconst mapStateToProps = (state: IState) => ({\n    typingText: typingTextSelector(state),\n    passedGames: passedGamesSelector(state),\n    userData: userDataSelector(state)\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    setTypingText: (text: string) => dispatch(setTypingText(text)),\n    setPassedGame: (passedGames: IPassedGame[]) => dispatch(setPassedGame(passedGames))\n})\n\nexport const PlayComponent = connect(mapStateToProps, mapDispatchToProps)(Play)\n","export const GAME_INTERVAL_SECONDS = 60\n","import {responseHandler} from './ResponseHandler'\n\nexport function ApiService() {\n    const fetchData = (url: string, method: string, data?: object) => {\n        let options\n        const generalOptions = {\n            method: method,\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n\n        if (data) {\n            options = {\n                ...generalOptions,\n                body: JSON.stringify(data)\n            }\n        } else {\n            options = {\n                ...generalOptions\n            }\n        }\n\n        return fetch(url, options).then(\n            responseHandler.success,\n            responseHandler.failure\n        )\n    }\n\n    return {\n        fetchData\n    }\n}\n","import * as React from 'react'\nimport {Redirect, Route} from \"react-router-dom\";\nimport {useLogin} from \"./hooks/useLogin\";\n\ninterface IProtectedRouteProps {\n    exact: boolean\n    path: string\n}\n\nexport const ProtectedRoute: React.FunctionComponent<IProtectedRouteProps> = React.memo(props => {\n    const {children, ...rest} = props\n    const {isLoggedIn} = useLogin()\n\n    return (\n        <Route\n            {...rest}\n            render={props =>\n                isLoggedIn() ? children : (\n                    <Redirect to={{pathname: '/login', state: {from: props.location}}}/>\n                )\n            }\n        />\n    )\n})\n","import * as React from 'react';\nimport {css} from 'emotion'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {LoginComponent} from \"./LoginComponent\";\nimport {Container} from \"react-bootstrap\";\nimport {BrowserRouter as Router, Switch, Route, Redirect} from \"react-router-dom\";\nimport {PlayComponent} from \"./PlayComponent\";\nimport {ProtectedRoute} from \"./ProtectedRoute\";\n\nconst containerClass = css`\n    position: relative;\n`\n\nconst App: React.FunctionComponent = () => {\n    return (\n        <Container className={containerClass}>\n            <Router>\n                <Switch>\n                    <Route exact path=\"/speedType\">\n                        <Redirect to=\"/play\"/>\n                    </Route>\n                    <Route exact strict path=\"/login\">\n                        <LoginComponent/>\n                    </Route>\n                    <ProtectedRoute exact path=\"/play\">\n                        <PlayComponent/>\n                    </ProtectedRoute>\n                </Switch>\n            </Router>\n        </Container>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { compose } from 'redux'\n\nexport const composeEnhancers = (storeNameForDevTool: string) =>\n    ((window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\n        (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n            name: storeNameForDevTool,\n        })) ||\n    compose\n","import {IState} from \"./IState\";\nimport * as actionTypes from \"./actions\";\n\nexport interface IAction {\n    type: string\n    payload?: any\n}\n\nexport const initialState = {\n    typingText: '',\n    passedGames: [],\n    userData: null\n}\n\nexport const reducer = (state: IState = initialState, action: IAction) => {\n    switch(action.type) {\n        case actionTypes.SET_TYPING_TEXT: {\n            return {\n                ...state,\n                typingText: action.payload\n            }\n        }\n\n        case actionTypes.SET_PASSED_GAME: {\n            return {\n                ...state,\n                passedGames: action.payload ? action.payload : []\n            }\n        }\n\n        case actionTypes.SET_USER_DATA: {\n            return {\n                ...state,\n                userData: action.payload\n            }\n        }\n\n        default: {\n            return state\n        }\n    }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport {applyMiddleware, createStore} from 'redux'\nimport thunk from \"redux-thunk\";\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport {getLocalStorage} from \"./shared/utilities/localstorage\";\nimport {composeEnhancers} from \"./store/devTool\";\nimport {initialState, reducer} from \"./store/reducer\";\nimport {IUser} from \"./shared/models/IUser\";\nimport {IPassedGame} from \"./shared/models/IPassedGame\";\n\nconst storage = getLocalStorage()\n\n// get userData and passedGame from localstorage to keep persistent login\nconst user: IUser | null | undefined = storage.getItem('user')\nconst passedGames: IPassedGame[] = user && storage.getItem(`passedGames-${user.id}`) ?\n        storage.getItem(`passedGames-${user.id}`) :\n        initialState.passedGames\nconst dataFromLocalStorage = {\n    ...initialState,\n    passedGames,\n    userData: user ? user : initialState.userData\n}\n\nconst store = createStore(\n    reducer,\n    dataFromLocalStorage,\n    composeEnhancers('typeRacer')(applyMiddleware(thunk))\n)\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}